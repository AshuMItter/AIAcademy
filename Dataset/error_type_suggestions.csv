ErrorKind,C# Topic,Suggestions
AddAccessorDeclaration,Event Adder (add { ... }),"When implementing event adders; please ensure thread safety by using lock statements or other synchronization mechanisms."
AddAssignmentExpression,Compound Assignment (x += y),"For compound assignments; consider operator precedence carefully to avoid unexpected results."
AddExpression,Addition (x + y),"When adding numbers; be mindful of potential overflow scenarios - perhaps use checked blocks where appropriate."
AddressOfExpression,Address-of Operator (&x),"This is primarily used in unsafe contexts - please ensure your project allows unsafe code and use with caution."
AliasKeyword,Namespace Alias (alias),"Namespace aliases can help resolve naming conflicts; but please use them judiciously to maintain code clarity."
AliasQualifiedName,Alias::Type,"When using alias-qualified names; please ensure the alias is properly defined at the top of your file."
AmpersandAmpersandToken,Logical AND (x && y),"Remember that && short-circuits - the right side won't evaluate if the left is false. This can be useful for null checks."
AmpersandEqualsToken,Bitwise AND Assignment (x &= y),"This is often used with flag enumerations - please document your intent clearly when using bitwise operations."
AmpersandToken,Bitwise AND (&); Ref/Out Parameters,"When using as a bitwise AND; please comment your intent. For ref/out; please ensure variables are initialized properly."
AnonymousMethodExpression,Anonymous Methods (delegate { }),"In modern C#; lambda expressions are often preferred for better readability."
AnonymousObjectCreationExpression,Anonymous Types (new { }),"Great for quick data holders; but please consider named types for public APIs or complex scenarios."
AnonymousObjectMemberDeclarator,Anonymous Types (new { X = 1 }),"Please use descriptive property names even in anonymous types for maintainability."
ArgListExpression,Variable Arguments (__arglist),"This is an advanced feature - please consider params arrays for more maintainable code."
Argument,Method/Indexer Argument,"When passing arguments; please consider readability with many parameters - named arguments can help."
ArgumentList,Method Arguments (x; y),"For methods with many parameters; please consider refactoring or using parameter objects."
ArrayCreationExpression,New Arrays (new int[10]),"For fixed-size collections; arrays are great; but consider List<T> for dynamic sizing needs."
ArrayInitializerExpression,Array Initialization (new int[] { 1; 2 }),"Collection expressions in newer C# versions provide cleaner syntax for initialization."
ArrayRankSpecifier,Array Dimensions ([;]),"Multi-dimensional arrays have special syntax - please consider if jagged arrays ([][]) might be more appropriate."
ArrayType,Arrays (int[]),"While arrays are fundamental; please explore Span<T> for performance-critical sections."
AsExpression,Safe Cast (x as T),"Always follow with a null check; as failed casts return null rather than throwing exceptions."
AscendingKeyword,LINQ Ascending (ascending),"This is the default sort order in LINQ; so you can often omit it explicitly."
AscendingOrdering,LINQ OrderBy (orderby),"For multi-column sorting; please use ThenBy for subsequent columns."
AssemblyKeyword,Assembly Attribute Target (assembly),"Assembly-level attributes are typically placed in AssemblyInfo.cs - please keep them organized there."
AsteriskEqualsToken,Multiplication Assignment (x *= y),"This is particularly useful in loops where you're accumulating values."
AsteriskToken,Multiplication Operator (*); Pointers (unsafe),"For multiplication; watch for overflow. For pointers; please limit unsafe code to necessary scenarios."
AsyncKeyword,Asynchronous Methods (async),"Please remember to await all async calls to avoid fire-and-forget patterns accidentally."
Attribute,Attribute Usage ([Obsolete]),"When creating custom attributes; please document their intended usage clearly."
AttributeArgument,Attribute Argument (1; "text"),"Attribute arguments must be compile-time constants - please plan accordingly."
AttributeArgumentList,Attribute Arguments ([Attr(1; "text")]),"Please maintain consistency in attribute argument formatting."
AttributeList,Attributes ([Attr]),"Attributes are powerful - please use them judiciously and document their purpose."
AttributeTargetSpecifier,Attribute Target (assembly:),"This specifies where an attribute applies - please use when there might be ambiguity."
AwaitExpression,Asynchronous Await (await task),"Please remember that await captures the synchronization context by default - use ConfigureAwait(false) in libraries."
BackslashToken,Escape Sequences,"For paths; please consider using verbatim strings (@) or Path.Combine for better readability."
BadDirectiveTrivia,Invalid Preprocessor Directives,"Modern IDEs will flag these - please address them promptly."
BadToken,Invalid Syntax,"This typically indicates a parsing error - please check your syntax carefully."
BarBarToken,Logical OR (x || y),"Remember this short-circuits - the right side won't evaluate if the left is true. Useful for null checks."
BarEqualsToken,Bitwise OR Assignment (x |= y),"Common with flag enumerations - please document your intent clearly."
BarToken,Bitwise OR (|),"When used with enums as flags; please mark the enum with [Flags] attribute."
BaseConstructorInitializer,Base Constructor (base()),"Please ensure the base class has a matching constructor."
BaseExpression,Base Class (base),"Use this to call overridden implementations - please avoid deep inheritance hierarchies."
BaseKeyword,Base Class Access (base),"When using base; please ensure it's truly necessary as it creates tight coupling."
BaseList,Base Types (: IDisposable),"Please limit the number of direct base classes/interfaces for simplicity."
BitwiseAndExpression,Bitwise AND (x & y),"Common for flag checks - please consider using HasFlag method for readability."
BitwiseNotExpression,Bitwise NOT (~x),"Please comment bitwise operations as they can be unclear at first glance."
BitwiseOrExpression,Bitwise OR (x | y),"When combining flags; please consider readability over brevity."
Block,Code Block { ... },"Please maintain consistent indentation within blocks for readability."
BoolKeyword,Boolean Type (bool),"Please use 'bool' rather than 'Boolean' for consistency with C# style."
BreakKeyword,Loop Exit (break),"Please ensure breaks make the control flow clear - complex break patterns can be confusing."
ByteKeyword,Byte Type (byte),"Please be mindful of the 0-255 range when using bytes."
CaseKeyword,Case Label (case),"Please include a break or return in each case block unless intentionally falling through."
CaseSwitchLabel,Switch Case Block (case 1: ... ),"In modern C#; pattern matching might be more expressive than simple case labels."
CastExpression,Type Casting ((int)x),"Please consider using 'as' with null check or pattern matching when possible for safety."
CatchClause,Catch Block (catch (Exception ex) { ... }),"Please catch specific exceptions rather than general Exception when possible."
CatchDeclaration,Catch Parameter (Exception ex),"The exception variable should be used meaningfully or omitted if unused."
CatchFilterClause,Catch When (when (x)),"This is cleaner than catching and rethrowing - please use when appropriate."
CharKeyword,Character Type (char),"Remember chars are Unicode - please handle surrogate pairs properly if needed."
CharacterLiteralExpression,Character Literals ('a'),"Single quotes denote chars - please don't confuse with strings."
CharacterLiteralToken,Characters ('a'),"For non-ASCII chars; consider using Unicode escapes for clarity."
CheckedExpression,Overflow Checked (checked(x + y)),"Please use in financial or sensitive calculations where overflow would be problematic."
CheckedKeyword,Overflow Checking (checked),"Please consider your context - checked is default in most scenarios."
ClassConstraint,Reference Type Constraint (class),"When constraining generics; please ensure the constraint is truly necessary."
ClassDeclaration,Class (class C { ... }),"Please follow single responsibility principle when designing classes."
ClassKeyword,Class Declaration (class),"Remember that classes are reference types - please understand implications for equality comparisons."
CloseBraceToken,Code Blocks (}),"Please ensure every opening brace has a matching closing brace."
CloseBracketToken,Arrays/Indexers (]),"Please be mindful of array bounds when using indexers."
CloseParenToken,Parentheses (Closing),"Please ensure parentheses are properly nested and matched."
CoalesceAssignmentExpression,Null Coalescing Assignment (x ??= y),"This is great for lazy initialization - please ensure thread safety if needed."
CoalesceExpression,Null Coalescing (x ?? y),"Please provide meaningful default values when using null coalescing."
CollectionInitializerExpression,Collection Initialization (new List<int> { 1; 2 }),"Collection expressions in C# 12+ provide even cleaner syntax."
ColonColonToken,Namespace Alias (::),"Please use sparingly - proper namespace organization often eliminates the need."
ColonToken,Type Constraints; Ternary Operator (:),"For ternary operators; please consider readability with complex expressions."
CommaToken,Parameter/Argument Separator (,),"With many parameters; please consider line breaks for readability."
CompilationUnit,Source File (entire .cs file),"Please maintain consistent organization within each file."
ConditionalAccessExpression,Null-conditional Access (x?.Property),"This is cleaner than null checks - but please consider if nulls should be allowed at all."
ConditionalExpression,Ternary Operator (?:),"Please use judiciously - complex nested ternaries can be hard to read."
ConstKeyword,Compile-Time Constants (const),"Please use for values that truly won't change - not just for convenience."
ConstructorConstraint,Default Constructor Constraint (new()),"When constraining generics; please ensure the constraint is truly necessary."
ConstructorDeclaration,Constructor (C() { ... }),"Please keep constructors simple - consider factory methods for complex initialization."
ContinueKeyword,Loop Continuation (continue),"Please ensure the loop logic remains clear when using continue."
ConversionOperatorDeclaration,Conversion (public static implicit operator Y(X x)),"Please make conversion operators obvious and non-lossy."
DefaultExpression,Default Value (default(T)),"Please consider if default(T) is truly the desired value for your scenario."
DefaultKeyword,Default Case (default),"Please include a default case in switches unless you're certain all cases are covered."
DefaultLiteralExpression,Default Value (default),"This is most useful in generic contexts where the type is inferred."
DefaultSwitchLabel,Default Label (default),"Even if you think all cases are covered; a default case can prevent subtle bugs."
DefineDirectiveTrivia,Preprocessor Symbols (#define),"Please consider if build configurations might be more maintainable."
DefineKeyword,Preprocessor Symbol (#define),"Symbols should have clear; specific names if they must be used."
DelegateDeclaration,Delegate (delegate void D()),"In modern C#; Func/Action are often preferred for standard signatures."
DelegateKeyword,Delegate Declaration (delegate),"Please understand the performance implications of delegate invocation."
DescendingKeyword,LINQ Descending (descending),"Please use for reverse sorting - remember you can chain with ThenBy."
DescendingOrdering,LINQ OrderBy (orderby),"For multi-column sorts; descending applies only to the current column."
DestructorDeclaration,Destructor (~C() { ... }),"Destructors are rarely needed in managed code - please implement IDisposable instead."
DisabledTextTrivia,Preprocessor Disabled Code,"Please remove disabled code rather than commenting it out long-term."
DisableKeyword,Warning Suppression (#disable),"Please document why warnings are being suppressed and keep scope minimal."
DivideAssignmentExpression,Compound Assignment (x /= y),"Please ensure you're not dividing by zero accidentally."
DivideExpression,Division (x / y),"Always consider division by zero possibilities in your logic."
DoKeyword,Do-While Loop (do),"Please ensure the loop condition will eventually become false."
DoStatement,Do-While Loop (do { } while (x)),"Remember the body always executes at least once - ensure this is intended."
DollarToken,Interpolated Strings,"Interpolated strings are generally preferred over string.Format() for readability."
DotDotToken,Range Operator (..),"Great for array slicing - please ensure indices are within bounds."
DotToken,Member Access (.),"Please follow the Law of Demeter - don't chain too many member accesses."
DoubleKeyword,Double-Precision Float (double),"Please be aware of precision limitations with floating-point arithmetic."
DoubleQuoteToken,String Literals ("),"For multi-line strings; please consider verbatim strings (@) or raw strings."
ElementAccessExpression,Indexers (array[0]),"Please check bounds where necessary or use TryGet-style methods."
ElementBindingExpression,Null-conditional Indexer (x?[0]),"This is cleaner than manual null checks for indexer access."
ElifDirectiveTrivia,Preprocessor Else-If (#elif),"Please consider if feature flags might be more maintainable."
ElifKeyword,Preprocessor Conditional (#elif),"Deep conditional compilation can make testing difficult - please use judiciously."
ElseClause,Else Block (else { ... }),"Please avoid deep nesting with else-if chains - consider early returns."
ElseKeyword,Else Clause (else),"Try to keep else blocks small and focused on the alternative path."
EmptyStatement,Empty Statement (;),"Please avoid empty statements as they can be confusing and may indicate incomplete code."
EndIfDirectiveTrivia,Preprocessor End (#endif),"Please ensure all #if directives are properly closed."
EndIfKeyword,Preprocessor End (#endif),"Modern IDEs can help match #if-#endif pairs - please use this feature."
EndOfDirectiveToken,Preprocessor Directives,"This terminates directives - please ensure proper formatting."
EndOfDocumentationCommentToken,XML Documentation,"Please maintain complete and accurate documentation."
EndOfFileToken,Source Termination,"Modern IDEs help ensure files end properly - please watch for incomplete constructs."
EndOfLineTrivia,Whitespace (newline),"Please follow team standards for line endings (CRLF vs LF)."
EndRegionDirectiveTrivia,Code Folding (#endregion),"Please keep regions small and focused if they must be used."
EndRegionKeyword,Code Folding (#endregion),"Consider that modern IDEs make code folding less necessary."
EnumDeclaration,Enum (enum E { ... }),"Please use enums for fixed sets of related values - not just as integer constants."
EnumKeyword,Enum Declaration (enum),"Consider adding extension methods for rich enum functionality."
EnumMemberDeclaration,Enum Member (A = 1),"Please use explicit values when they matter for serialization or interop."
EqualsEqualsToken,Equality Operator (==),"When overriding ==; please also override Equals() and GetHashCode()."
EqualsExpression,Equality (x == y),"For reference types; == and Equals() may behave differently - please be intentional."
EqualsGreaterThanToken,Lambda Operator (=>),"Lambda expressions should be kept concise - consider extracting complex logic."
EqualsKeyword,LINQ Join Equality (equals),"Please ensure your equality comparison is appropriate for the data types."
EqualsToken,Assignment (=),"Please consider var when the type is obvious from the right-hand side."
EqualsValueClause,Variable Assignment (= 0),"Please initialize variables where they're declared when possible."
ErrorDirectiveTrivia,Compiler Errors (#error),"Please use to enforce upgrade requirements or critical notes."
ErrorKeyword,Compiler Error (#error),"This fails compilation - please use judiciously in shared code."
EventDeclaration,Event (event EventHandler E { add { ... } remove { ... } }),"Please follow standard event patterns (object sender; EventArgs args)."
EventFieldDeclaration,Event Field (event EventHandler E),"Field-like events are convenient but offer less control than custom add/remove."
EventKeyword,Events (event),"Please consider if events are truly needed or if callbacks would suffice."
ExclamationEqualsToken,Inequality Operator (!=),"Should behave as the logical inverse of == - please implement consistently."
ExclamationToken,Null-forgiving Operator (!),"Please use sparingly - it overrides null safety checks so ensure you're certain of non-null."
ExplicitInterfaceSpecifier,Explicit Interface (void I.Method()),"Please use when you need to disambiguate between interfaces with same members."
ExplicitKeyword,Explicit Conversion (explicit),"Please ensure explicit conversions are obvious and non-lossy."
ExpressionStatement,"x = 5;",Basic Syntax,Assignment,Start with simple value assignments,Confusing assignment (=) with equality (==)
ExternAliasDirective,Extern Alias (extern alias A),"This helps resolve assembly conflicts - please document why it's needed."
ExternKeyword,External Methods (extern),"Primarily for P/Invoke - please ensure proper error handling for native calls."
FalseKeyword,Boolean False (false),"Please don't compare to false explicitly (use if (!condition) rather than if (condition == false))."
FieldDeclaration,Field (int x;),"Please keep fields private and expose via properties when needed."
FieldKeyword,Field Attribute Target (field),"Attributes on fields should be used judiciously - please document their purpose."
FileKeyword,File-scoped Types (file),"Great for limiting type scope - please use when types shouldn't be used outside the file."
FileScopedNamespaceDeclaration,File-scoped Namespace (namespace N;),"This reduces indentation - please ensure all file contents belong to the namespace."
FinallyClause,Finally Block (finally { ... }),"Please use for cleanup code that must run regardless of exceptions."
FinallyKeyword,Finally Block (finally),"Even if you're catching all exceptions; finally ensures cleanup after try blocks."
FixedKeyword,Fixed Buffers (unsafe),"This pins memory - please use only when absolutely necessary for interop."
FixedStatement,Unsafe Fixed (fixed (int* p = ...)),"Please keep fixed blocks small and simple for safety."
FloatKeyword,Single-Precision Float (float),"Please be aware of precision limitations compared to double."
ForEachKeyword,ForEach Loop (foreach),"Please don't modify collections during iteration - it causes exceptions."
ForEachStatement,ForEach Loop (foreach (var x in y)),"Consider using LINQ for complex filtering/transformation needs."
ForKeyword,For Loop (for),"Please keep loop control variables narrowly scoped when possible."
ForStatement,For Loop (for (int i = 0; i < 10; i++)),"Consider if foreach or LINQ might be more expressive for your scenario."
FromClause,LINQ From (from x in y),"This starts query syntax - please consider if method syntax would be clearer."
FromKeyword,LINQ Query (from),"Query syntax is great for complex queries - method syntax often better for simple ones."
GenericName,Generic Types (List<T>),"Please use descriptive type parameter names (TKey; TValue) for multi-parameter generics."
GetAccessorDeclaration,Getter (get { ... }),"Please keep getters simple and free of side effects."
GetKeyword,Property Accessor (get),"Consider expression-bodied members for simple getters (=> field)."
GlobalKeyword,Global Namespace (global),"Please use sparingly to resolve naming conflicts only when necessary."
GlobalStatement,Top-Level Statements (C# 9+),"Great for simple programs - please transition to classes as complexity grows."
GotoCaseStatement,Goto Case (goto case 1),"Please use judiciously - pattern matching might be more expressive."
GotoDefaultStatement,Goto Default (goto default),"Please ensure default case exists when using this."
GotoKeyword,Jump Statement (goto),"Please avoid except for breaking out of nested loops or switch fallthrough."
GroupClause,LINQ Group (group x by y),"Please name the grouping key meaningfully for readability."
GroupKeyword,LINQ Grouping (group),"Grouping is powerful - please understand deferred execution implications."
GreaterThanEqualsToken,Greater Than or Equal (>=),"Please implement consistently with other comparison operators."
GreaterThanGreaterThanEqualsToken,Right Shift Assignment (>>=),"Please document bit manipulation clearly."
GreaterThanGreaterThanGreaterThanEqualsToken,Unsigned Right Shift Assignment (>>>=),"Added in C# 11 - please ensure team members understand this operation."
GreaterThanGreaterThanGreaterThanToken,Unsigned Right Shift (>>>),"Added in C# 11 - useful for unsigned number handling."
GreaterThanGreaterThanToken,Right Shift (>>),"Please note behavior differs for signed vs unsigned types."
GreaterThanToken,Generics (>); Comparisons (>),"For generics; please consider constraints to make usage safer."
HiddenKeyword,Editor Visibility (hidden),"This affects tooling - please use only when necessary."
IdentifierName,Variable/Type Names,"Please use clear; descriptive names following naming conventions."
IdentifierToken,Variable/Type Names,"Avoid abbreviations unless they're very common and clear."
IfDirectiveTrivia,Preprocessor Conditionals (#if),"Please consider if feature flags would be more maintainable."
IfKeyword,Conditional Statement (if),"Please keep conditions simple - extract complex logic to methods."
IfStatement,Conditional (if (x) { ... }),"Consider early returns to reduce nesting where appropriate."
ImplicitArrayCreationExpression,Implicit Arrays (new[] { 1; 2 }),"Type is inferred from elements - please ensure all elements have compatible types."
ImplicitKeyword,Implicit Conversion (implicit),"Please use sparingly as implicit conversions can hide complexity."
ImplicitObjectCreationExpression,Target-typed New (new()),"Great when type is obvious from context - please ensure readability isn't impacted."
InKeyword,Input Parameters (in),"This provides readonly reference semantics - please use for large structs."
IndexerDeclaration,Indexer (int this[int i] => ...),"Please ensure indexers have intuitive behavior matching collection expectations."
IndexExpression,Indexer Access (array[0]),"Please consider adding range support (Index/Range) for modern C#."
IncompleteMember,Incomplete Code (int x),"This typically indicates a parsing error - please complete the member."
InitKeyword,Init-only Properties (init),"Great for immutable objects - please use where appropriate."
InterfaceDeclaration,Interface (interface I { ... }),"Please keep interfaces focused on single responsibilities."
InterfaceKeyword,Interface Declaration (interface),"Consider interface segregation principle when designing interfaces."
InternalKeyword,Access Modifier (internal),"This provides assembly-level encapsulation - please use thoughtfully."
InterpolatedStringEndToken,Interpolated Strings ("),"Please balance braces carefully in interpolated strings."
InterpolatedStringExpression,Interpolated Strings ($"text"),"Much cleaner than string.Format() - please prefer for most string building."
InterpolatedStringStartToken,Interpolated Strings ($"),"Modern C# allows newlines in interpolations - please format for readability."
InterpolatedStringTextToken,Interpolated String Content,"Please keep interpolation holes simple for readability."
InterpolatedStringToken,Interpolated Strings ($"text"),"Consider string interpolation handlers in C# 10+ for advanced scenarios."
InterpolatedVerbatimStringStartToken,Verbatim Interpolated Strings ($@"),"Great for strings needing both interpolation and verbatim features."
InterpolationAlignmentClause,Interpolation Alignment ({x;-10}),"This can help with columnar output - please document alignment values."
InterpolationFormatClause,Interpolation Formatting,"Please use standard format strings where possible for consistency."
IntoClause,LINQ Continuation (into z),"This can make complex queries more readable - please name continuations meaningfully."
IntoKeyword,LINQ Continuation (into),"Consider if separate queries might be clearer than complex continuations."
IntKeyword,Integer (int),"This is the default choice for whole numbers in most cases."
InvocationExpression,Method Calls (Method()),"Please follow naming conventions for method names."
IsExpression,Type Check (x is T),"In modern C#; pattern matching (is T t) is preferred over direct casting."
IsKeyword,Type Checking (is),"Pattern matching provides more capabilities than simple type checking."
JoinClause,LINQ Join (join a in b on c equals d),"Please ensure join conditions are equality comparisons for best performance."
JoinIntoClause,LINQ Join Into (join ... into g),"Group joins are powerful - please understand the nested structure they create."
JoinKeyword,LINQ Joins (join),"Please consider performance implications with large datasets."
LabeledStatement,Label (label:),"Please limit use to switch statements or breaking nested loops."
LessThanEqualsToken,Less Than or Equal (<=),"Please implement consistently with other comparison operators."
LessThanLessThanEqualsToken,Left Shift Assignment (<<=),"Please document bit manipulation clearly."
LessThanLessThanToken,Left Shift (<<),"Please comment bit shift operations as they can be unclear."
LessThanSlashToken,XML Documentation (</),"Please properly close all XML documentation tags."
LessThanToken,Generics (<T>); Comparisons (<),"For generics; please consider constraints to make usage safer."
LetClause,LINQ Let (let z = x),"Great for intermediate calculations - please name variables meaningfully."
LetKeyword,LINQ Variable (let),"This can make complex queries more readable by breaking them into steps."
LineDirectiveTrivia,Line Control (#line),"Primarily for generated code - please use judiciously."
LineKeyword,Line Directive (#line),"This affects debugging - please ensure it's properly maintained."
List,Collections/Generics,"For collections; please consider IEnumerable<T> for parameters when you only need iteration."
LoadDirectiveTrivia,Source Generator Directives (#load),"This is a scripting feature - please use judiciously in production code."
LoadKeyword,Source Generator Directives (#load),"Please ensure loaded scripts are from trusted sources."
LocalDeclarationStatement,Local Variable (int x = 0),"Please initialize variables where they're declared when possible."
LocalFunctionStatement,Local Function (void F() { ... }),"Great for helper functions used in one method - please keep small."
LockKeyword,Thread Synchronization (lock),"Please keep locked sections short to minimize contention."
LockStatement,Thread Lock (lock (x) { ... }),"Please document what the lock object protects for maintainability."
LongKeyword,Long Integer (long),"Please use for very large numbers or file sizes."
MakeRefExpression,Obsolete Feature (__makeref(x)),"This is rarely needed in modern C# - please consider alternatives."
MakeRefKeyword,Obsolete Feature (__makeref),"These features are advanced and rarely needed - please consult with seniors."
MemberBindingExpression,Null-conditional Binding (x?.Method()),"This is cleaner than manual null checks - but consider if nulls should be allowed."
MethodDeclaration,Method (void M() { ... }),"Please keep methods small and focused on single tasks."
MethodKeyword,Method Attribute Target (method),"Please document why methods need special attributes."
MinusEqualsToken,Subtraction Assignment (x -= y),"Common in loops and counters - please ensure it's clear what's being subtracted."
MinusGreaterThanToken,Pointer Member Access (->),"This is primarily used in unsafe code - please ensure it's truly necessary."
MinusMinusToken,Decrement Operator (--),"Please be mindful of pre vs post decrement differences in expressions."
MinusToken,Subtraction Operator (-); Unary Negation,"Please use spaces around operators for readability."
ModuloAssignmentExpression,Compound Assignment (x %= y),"Please ensure the modulo operation makes sense for your context."
ModuloExpression,Modulo (x % y),"Please understand behavior with negative numbers if that's possible."
ModuleKeyword,Module Attribute Target (module),"This is rarely used - please document why it's needed."
MultiplyAssignmentExpression,Compound Assignment (x *= y),"Particularly useful in accumulation scenarios."
MultiplyExpression,Multiplication (x * y),"Please watch for integer overflow in multiplication."
NameColon,Named Arguments (param: value),"Great for boolean parameters or when calling methods with many parameters."
NameEquals,Named Attribute Argument (Name = value),"This makes attribute usage more readable - please use when helpful."
NameMemberCref,XML Documentation (cref="Member"),"Please keep documentation references up-to-date with code changes."
NameOfKeyword,Nameof Expression (nameof),"This is refactoring-safe - please prefer over string literals for member names."
NamespaceDeclaration,Namespace (namespace N { ... }),"Please follow company.product.component naming conventions."
NamespaceKeyword,Namespace Declaration (namespace),"Please organize types logically into namespaces."
NewKeyword,Object Creation (new),"Please consider object initializers for more readable instantiation."
None,General/Unknown,"Please handle unknown syntax kinds gracefully in parsers/analyzers."
NotEqualsExpression,Inequality (x != y),"Should behave as the logical inverse of == - please implement consistently."
NotKeyword,Pattern Matching (not),"This negates patterns - great for excluding specific cases."
NullKeyword,Null Reference (null),"Please enable nullable reference types to minimize null-related bugs."
NullableKeyword,Nullable Context (#nullable),"Please enable nullable context project-wide for better null safety."
NullLiteralExpression,Null Reference (null),"Please consider if null is truly a valid state in your design."
NumericLiteralExpression,Number Literals (123),"Please use suffixes for specific types when needed (1.0f; 1m)."
NumericLiteralToken,Numbers (int; float; etc.),"Please consider readability with large numbers (1_000_000)."
ObjectCreationExpression,New Objects (new X()),"Please consider factory methods when construction is complex."
ObjectInitializerExpression,Object Initialization (new X { Prop = 1 }),"This provides cleaner initialization syntax - please use where appropriate."
ObjectKeyword,Object Type (object),"Please prefer specific types when possible - use object sparingly."
OnKeyword,LINQ Join Condition (on),"Please ensure join conditions are equality comparisons."
OpenBraceToken,Code Blocks ({),"Please be consistent with brace placement (same line or new line)."
OpenBracketToken,Arrays/Indexers ([),"Please check bounds when using indexers directly."
OpenParenToken,Parentheses (Method Calls; Expressions),"Please use for clarity in complex expressions."
OperatorDeclaration,Operator (public static X operator+(X a; X b)),"Please only overload operators where the meaning is absolutely obvious."
OperatorKeyword,Operator Overloading (operator),"Please ensure overloaded operators follow mathematical conventions."
OrAssignmentExpression,Compound Assignment (x |= y),"Common for flag operations - please document intent."
OrKeyword,Pattern Matching (or),"This combines patterns - great for matching multiple cases."
OrderByClause,LINQ OrderBy (orderby),"Please consider performance implications of sorting large datasets."
OrderByKeyword,LINQ Sorting (orderby),"Remember you can chain ThenBy for secondary sorts."
OutKeyword,Output Parameters (out),"In modern C#; you can declare out variables inline at the call site."
OverrideKeyword,Method Overriding (override),"Please ensure you understand the base class behavior you're overriding."
Parameter,Method Parameter,"Ensure parameters are properly validated and have meaningful names that reflect their purpose."
ParamsKeyword,Variable Arguments (params),"Please consider if a collection parameter might be clearer."
ParenthesizedExpression,Expression Grouping ((x)),"Please use to clarify operator precedence in complex expressions."
ParenthesizedLambdaExpression,Lambda ((x) => x),"Parentheses are required for multiple parameters."
PartialKeyword,Partial Types (partial),"Great for splitting large classes or separating generated code."
PercentEqualsToken,Modulo Assignment (x %= y),"Please ensure the modulo operation makes sense for your context."
PercentToken,Modulo Operator (%),"Please understand behavior with negative numbers if relevant."
PlusEqualsToken,Addition Assignment (x += y),"Common for string concatenation and numeric accumulation."
PlusPlusToken,Increment Operator (++),"Please be mindful of pre vs post increment differences in expressions."
PlusToken,Addition Operator (+); Unary Plus,"The unary plus is rarely needed - please ensure it's intentional."
PointerIndirectionExpression,Pointer Dereference (*x),"This is unsafe code - please ensure it's truly necessary."
PointerMemberAccessExpression,Unsafe Member Access (x->Field),"Please limit unsafe code to required scenarios."
PointerType,Unsafe Pointers (int*),"Please consider managed alternatives before using pointers."
PostDecrementExpression,Postfix Decrement (x--),"The value returned is before decrement - please ensure this is intended."
PostIncrementExpression,Postfix Increment (x++),"The value returned is before increment - please ensure this is intended."
PredefinedType,Built-in Types (int; string),"Please prefer language keywords (int) over framework types (Int32)."
PreIncrementExpression,Prefix Increment (++x),"The value returned is after increment - please ensure this is intended."
PreprocessingMessageTrivia,Preprocessor Messages,"Please ensure these messages are clear and actionable."
PrivateKeyword,Access Modifier (private),"Please default to private and elevate access as needed."
PropertyDeclaration,Property (int P { get; set; }),"Please consider immutability where appropriate (init or private set)."
PropertyKeyword,Property Attribute Target (property),"Please document why properties need special attributes."
ProtectedKeyword,Access Modifier (protected),"Please use carefully as it creates coupling with derived classes."
PublicKeyword,Access Modifier (public),"Please follow principle of least privilege when exposing members."
QualifiedCref,XML Documentation (cref="Namespace.Type"),"Please use fully qualified names when there might be ambiguity."
QualifiedName,Namespace.Class,"Please use using directives to reduce verbosity where possible."
QuestionQuestionEqualsToken,Null-coalescing Assignment (??=),"Great for lazy initialization - please ensure thread safety if needed."
QuestionQuestionToken,Null-coalescing Operator (??),"Please provide meaningful default values when using this."
QuestionToken,Nullable Types (?); Ternary Operator (?:),"For nullable types; please check for null before accessing members."
RangeExpression,Range Operator (1..10),"Great for array slicing - please ensure indices are valid."
ReadOnlyKeyword,Immutable Fields (readonly),"Please use for fields that shouldn't change after construction."
RecordKeyword,Record Types (record),"Great for immutable data carriers - please consider for DTOs."
RefExpression,Ref Returns/Locals,"Please understand ref safety rules in modern C#."
RefKeyword,By-Reference Passing (ref),"Please ensure the called method doesn't store the reference beyond its scope."
ReferenceDirectiveTrivia,Assembly References (#r),"This is a scripting feature - please use proper project references in production."
ReferenceKeyword,Assembly Reference (#reference),"Please ensure referenced assemblies are properly versioned."
RefTypeExpression,Obsolete Feature (__reftype),"These features are advanced and rarely needed - please consult with seniors."
RefTypeKeyword,Obsolete Feature (__reftype),"Please consider modern alternatives to these advanced features."
RefValueExpression,Obsolete Feature (__refvalue(x; int)),"These features are advanced and rarely needed - please consult with seniors."
RegionDirectiveTrivia,Code Folding (#region),"Please keep regions small and focused if they must be used."
RegionKeyword,Code Folding (#region),"Consider that small; well-named types are often better than regions."
RelationalPattern,Pattern Matching,"Great for range checks in switch expressions."
RemoveAccessorDeclaration,Event Remover (remove { ... }),"Please ensure thread safety when removing event handlers."
RemoveKeyword,Event Accessor (remove),"Please implement remove to properly detach handlers."
RequiredKeyword,Required Members (required),"Please use for properties that must be initialized."
RestoreKeyword,Warning Restoration (#restore),"Please keep warning suppressions narrowly scoped."
ReturnKeyword,Method Return (return),"Please consider returning early to reduce nesting where appropriate."
ReturnStatement,Method Return (return x),"Please keep return values consistent with method's stated purpose."
RightShiftAssignmentExpression,Compound Assignment (x >>= y),"Please document bit manipulation clearly."
RightShiftExpression,Bitwise Right Shift (x >> 2),"Note behavior differs for signed vs unsigned types."
SByteKeyword,Signed Byte (sbyte),"Please use only when you specifically need a signed 8-bit integer."
ScopedKeyword,Scoped References (scoped),"This is an advanced feature - please understand lifetime implications."
SealedKeyword,Non-Inheritable Classes (sealed),"Please use when further derivation isn't meaningful."
SelectClause,LINQ Projection (select x),"Please project only what you need for better performance."
SelectKeyword,LINQ Projection (select),"Consider if you need the whole object or just specific properties."
SemicolonToken,Statement Terminator (;),"Please keep statements concise for readability."
SetAccessorDeclaration,Setter (set { ... }),"Please validate inputs in setters but avoid complex logic."
SetKeyword,Property Accessor (set),"Consider init-only setters for immutable objects."
ShortKeyword,Short Integer (short),"Please use only when memory constraints exist - int is usually better."
SimpleAssignmentExpression,Assignment (x = y),"Please consider object initializers for complex initialization."
SimpleBaseType,Base Type (class C : B),"Please prefer composition over deep inheritance hierarchies."
SimpleLambdaExpression,Lambda (x => x),"Great for LINQ - please keep lambdas small and focused."
SimpleMemberAccessExpression,Member Access (x.Property),"Please follow Law of Demeter - don't chain too many accesses."
SingleLineCommentTrivia,Comments (//),"Please use to explain why; not what - the code should explain what."
SingleLineDocumentationCommentTrivia,XML Documentation (///),"Please document all public APIs thoroughly."
SingleLineRawStringLiteralToken,Raw Strings ("""text"""),"New in C# 11 - great for strings with many quotes."
SingleQuoteToken,Character Literals ('),"For chars; please remember single quotes (not double)."
SizeOfExpression,Size in Bytes (sizeof(int)),"Primarily used in unsafe contexts - please ensure it's needed."
SizeOfKeyword,Size in Bytes (sizeof),"Please understand this gives the managed size; which may differ from unmanaged."
SlashEqualsToken,Division Assignment (/=),"Please ensure you're not accidentally dividing by zero."
SlashGreaterThanToken,XML Documentation (/>),"Please properly close all XML documentation tags."
SlashToken,Division Operator (/); Comments (//),"For division; watch for integer division when you might want floating-point."
StackAllocArrayCreationExpression,Stack Allocation (stackalloc int[10]),"High-performance but risky - please consider Span<T> as an alternative."
StackAllocKeyword,Stack Allocation (stackalloc),"Please keep stackalloc blocks small to avoid overflow."
StaticKeyword,Static Members (static),"Please avoid overuse as it can make code less testable."
StringKeyword,String Type (string),"Remember strings are immutable - please use StringBuilder for heavy concatenation."
StringLiteralExpression,String Literals ("text"),"Please prefer interpolation over concatenation for building strings."
StringLiteralToken,Strings ("text"),"For multi-line strings; consider verbatim strings (@) or raw strings."
StructConstraint,Value Type Constraint (struct),"When constraining generics; please ensure the constraint is truly necessary."
StructDeclaration,Struct (struct S { ... }),"Please use only for small; immutable types - classes are usually better."
StructKeyword,Struct Declaration (struct),"Remember structs are value types - please understand implications."
SubtractAssignmentExpression,Compound Assignment (x -= y),"Common in loops and counters - please ensure it's clear."
SubtractExpression,Subtraction (x - y),"Please watch for underflow in unsigned arithmetic."
SwitchExpression,Switch Expressions,"Modern alternative to switch statements - very expressive."
SwitchKeyword,Switch Statement (switch),"In modern C#; please consider switch expressions over statements."
SwitchSection,Switch Case Block (case 1: ... ),"Please include break/return unless intentionally falling through."
SwitchStatement,Switch (switch (x) { ... }),"Please consider pattern matching for more expressive switches."
ThisConstructorInitializer,This Constructor (this()),"Please ensure another constructor exists to avoid infinite recursion."
ThisExpression,Current Instance (this),"Please use when needed to disambiguate; but avoid overuse."
ThrowKeyword,Exception Throwing (throw),"Please throw specific exception types that clearly indicate the problem."
ThrowStatement,Exception Throw (throw ex),"Please don't throw System.Exception - use specific derived types."
TrueKeyword,Boolean True (true),"Please don't compare to true explicitly (use if (condition) rather than if (condition == true))."
TrueLiteralExpression,Boolean True (true),"The true literal is rarely needed directly - used automatically in conditions."
TryKeyword,Exception Handling (try),"Please catch only exceptions you can handle meaningfully."
TryStatement,Exception Handling (try { ... }),"Please keep try blocks focused on the operation that might fail."
TypeArgumentList,Generic Arguments (<T>),"Please avoid deeply nested generics for readability."
TypeCref,XML Documentation (cref="T:Type"),"Please keep documentation references up-to-date."
TypeConstraint,Type Constraint (T : IDisposable),"Please ensure constraints are truly necessary for your generic."
TypeKeyword,Type Attribute Target (type),"Please document why types need special attributes."
TypeOfExpression,Type Reflection (typeof(int)),"Please consider nameof() when you need strings for member names."
TypeOfKeyword,Type Reflection (typeof),"This gets Type objects - useful for reflection but has performance costs."
TypeParameter,Generic Type Parameter (T),"Please use descriptive names for type parameters in public APIs."
TypeParameterConstraintClause,Generic Constraints (where T : new()),"Please consider if constraints make the API too restrictive."
TypeParameterList,Generic Parameters (<T>),"Please limit the number of type parameters for readability."
TypeVarKeyword,Generic Type Parameter (typevar),"This is for documentation - please use to document generic parameters."
UIntKeyword,Unsigned Integer (uint),"Please use carefully as lack of negative values can be surprising."
ULongKeyword,Unsigned Long (ulong),"Please use for very large unsigned ranges only when needed."
UnaryMinusExpression,Unary Negation (-x),"Please ensure the negation makes logical sense in context."
UnaryPlusExpression,Unary Plus (+x),"This is rarely needed as it's a no-op - please ensure it's intentional."
UndefDirectiveTrivia,Preprocessor Symbols (#undef),"Please ensure this doesn't conflict with build configurations."
UndefKeyword,Preprocessor Symbol (#undef),"Please document why symbols are being undefined."
UnderscoreToken,Discard Pattern (_),"Great for ignoring out parameters or unused lambda parameters."
UnmanagedKeyword,Unmanaged Constraints (unmanaged),"This is an advanced feature - please ensure it's truly needed."
UnsafeKeyword,Unsafe Code (unsafe),"Please limit unsafe blocks to only what's absolutely necessary."
UnsafeStatement,Unsafe Block (unsafe { ... }),"Please keep unsafe blocks small and clearly commented."
UsingDirective,Using (using System;),"Please organize usings logically (System first; then others; then your namespaces)."
UsingKeyword,Namespace Import (using),"Please consider using static for frequently used static members."
UsingStatement,Resource Management (using (var x = ...)),"Please use for all IDisposable objects to ensure proper cleanup."
Utf8StringLiteralExpression,UTF-8 Strings ("text"u8),"Great for low-level UTF8 handling - please document usage."
Utf8StringLiteralToken,UTF-8 Strings ("text"u8),"This creates ReadOnlySpan<byte> - please understand the implications."
VarKeyword,Implicit Typing (var),"Please use when the type is obvious from the right-hand side."
VariableDeclaration,Variable Declaration (int x),"Please initialize variables where they're declared when possible."
VariableDeclarator,Variable Initialization (x = 0),"Please consider object initializers for complex initialization."
VirtualKeyword,Virtual Methods (virtual),"Please document expected behavior in base class for overriders."
VoidKeyword,Void Return Type (void),"For async methods; please return Task instead of void."
VolatileKeyword,Thread-Safe Fields (volatile),"This is an advanced threading feature - please understand implications fully."
WarningDirectiveTrivia,Compiler Warnings (#warning),"Please use for TODO markers or important notes."
WarningKeyword,Compiler Warning (#warning),"Please address warnings promptly rather than suppressing them."
WhereClause,LINQ Where (where x > 0),"Please ensure your filter conditions are efficient for the data size."
WhereKeyword,Generic Constraints (where),"Constraints should make the API safer without being overly restrictive."
WhileKeyword,While Loop (while),"Please ensure your loop has a clear exit condition."
WhileStatement,While Loop (while (x) { }),"Pre-test loops - please ensure the condition will eventually become false."
WithExpression,Record Copying,"Great for immutable updates - please ensure all necessary properties are set."
WithKeyword,Record Copying (with),"This creates a modified copy - please ensure all relevant properties are considered."
XmlCDataEndToken,XML Documentation (]]>),"This ends CDATA sections - rarely needed in normal documentation."
XmlCDataSection,XML Documentation (<![CDATA[ ]]>),"Please use only when you need to escape XML special characters."
XmlCrefAttribute,XML Documentation (cref="Member"),"Please verify these references stay valid during refactoring."
XmlComment,XML Documentation (<!-- -->),"Please use standard /// comments instead for most documentation."
XmlCommentEndToken,XML Documentation (-->),"Please properly terminate all XML comments."
XmlCommentStartToken,XML Documentation (<!--),"Please use standard /// comments for most documentation needs."
XmlElement,XML Documentation (<element>),"Please use standard XML doc elements like summary; returns; etc."
XmlElementEndTag,XML Documentation (</element>),"Please properly close all XML elements."
XmlElementStartTag,XML Documentation (<element>),"Please follow standard XML doc conventions."
XmlEmptyElement,XML Documentation (<element/>),"Self-closing tags are fine for elements with no content."
XmlName,XML Documentation (element names),"Please use standard doc element names like summary; remarks; etc."
XmlNameAttribute,XML Documentation (name="param"),"Please keep these in sync with method parameters."
XmlPrefix,XML Documentation (namespace prefixes),"Rarely needed in normal documentation."
XmlProcessingInstruction,XML Documentation (<? ?>),"Mostly for XML files rather than code documentation."
XmlProcessingInstructionEndToken,XML Documentation (?>),"Please properly terminate processing instructions."
XmlProcessingInstructionStartToken,XML Documentation (<?),"Rarely used in normal C# code documentation."
XmlText,XML Documentation (text content),"Please write clear; complete documentation."
XmlTextAttribute,XML Documentation (attribute="text"),"Please use standard doc attributes like cref; name; etc."
XmlTextLiteralNewLineToken,XML Documentation (newline),"Please format documentation for readability."
XmlTextLiteralToken,XML Documentation (text),"Please maintain complete and accurate documentation."
YieldBreakStatement,Iterator Termination (yield break),"This ends an iterator sequence - please ensure all paths terminate."
YieldKeyword,Iterator Blocks (yield),"Please understand deferred execution implications."
YieldReturnStatement,Iterator Yield (yield return x),"This produces sequence values one at a time - great for large datasets."
